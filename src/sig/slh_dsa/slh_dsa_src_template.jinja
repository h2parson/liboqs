// SPDX-License-Identifier: MIT

#include <stdlib.h>

#include "{{externalHeaderPath}}"
#include "{{internalHeaderPath}}"

#if defined(OQS_ENABLE_SIG_slh_dsa_pure_{{hashAlg}}_{{paramSet}})
OQS_SIG *OQS_SIG_slh_dsa_pure_{{hashAlg}}_{{paramSet}}_new(void) {

	OQS_SIG *sig = OQS_MEM_malloc(sizeof(OQS_SIG));
	if (sig == NULL) {
		return NULL;
	}
	sig->method_name = OQS_SIG_alg_slh_dsa_pure_{{hashAlg}}_{{paramSet}};
	sig->alg_version = "FIPS205";

	sig->claimed_nist_level = 1;
	sig->euf_cma = true;
	sig->suf_cma = true;
	sig->sig_with_ctx_support = true;

	sig->length_public_key = OQS_SIG_slh_dsa_pure_{{hashAlg}}_{{paramSet}}_length_public_key;
	sig->length_secret_key = OQS_SIG_slh_dsa_pure_{{hashAlg}}_{{paramSet}}_length_secret_key;
	sig->length_signature = OQS_SIG_slh_dsa_pure_{{hashAlg}}_{{paramSet}}_length_signature;

	sig->keypair = OQS_SIG_slh_dsa_pure_{{hashAlg}}_{{paramSet}}_keypair;
	sig->sign = OQS_SIG_slh_dsa_pure_{{hashAlg}}_{{paramSet}}_sign;
	sig->verify = OQS_SIG_slh_dsa_pure_{{hashAlg}}_{{paramSet}}_verify;
	sig->sign_with_ctx_str = OQS_SIG_slh_dsa_pure_{{hashAlg}}_{{paramSet}}_sign_with_ctx_str;
	sig->verify_with_ctx_str = OQS_SIG_slh_dsa_pure_{{hashAlg}}_{{paramSet}}_verify_with_ctx_str;

	return sig;
}

OQS_API OQS_STATUS OQS_SIG_slh_dsa_pure_{{hashAlg}}_{{paramSet}}_keypair(uint8_t *public_key, uint8_t *secret_key) {
	const slh_param_t *prm = &slh_dsa_{{hashAlg}}_{{paramSet}};
	return (OQS_STATUS) slh_keygen_wrapper(public_key, secret_key, prm);
}

OQS_API OQS_STATUS OQS_SIG_slh_dsa_pure_{{hashAlg}}_{{paramSet}}_sign(uint8_t *signature, size_t *signature_len, const uint8_t *message, size_t message_len, const uint8_t *secret_key) {
	const slh_param_t *prm = &slh_dsa_{{hashAlg}}_{{paramSet}};
	return (OQS_STATUS) slh_sign_wrapper(signature, signature_len, message, message_len, secret_key, prm);
}

OQS_API OQS_STATUS OQS_SIG_slh_dsa_pure_{{hashAlg}}_{{paramSet}}_verify(const uint8_t *message, size_t message_len, const uint8_t *signature, size_t signature_len, const uint8_t *public_key) {
	const slh_param_t *prm = &slh_dsa_{{hashAlg}}_{{paramSet}};
	return (OQS_STATUS) slh_verify_wrapper(signature, signature_len, message, message_len, public_key, prm);
}

OQS_API OQS_STATUS OQS_SIG_slh_dsa_pure_{{hashAlg}}_{{paramSet}}_sign_with_ctx_str(uint8_t *signature, size_t *signature_len, const uint8_t *message, size_t message_len, const uint8_t *ctx_str, size_t ctx_str_len, const uint8_t *secret_key) {
	const slh_param_t *prm = &slh_dsa_{{hashAlg}}_{{paramSet}};
	return (OQS_STATUS) slh_sign_with_ctx_wrapper(signature, signature_len, message, message_len, ctx_str, ctx_str_len, secret_key, prm);
}

OQS_API OQS_STATUS OQS_SIG_slh_dsa_pure_{{hashAlg}}_{{paramSet}}_verify_with_ctx_str(const uint8_t *message, size_t message_len, const uint8_t *signature, size_t signature_len, const uint8_t *ctx_str, size_t ctx_str_len, const uint8_t *public_key) {
	const slh_param_t *prm = &slh_dsa_{{hashAlg}}_{{paramSet}};
	return (OQS_STATUS) slh_verify_with_ctx_wrapper(signature, signature_len, message, message_len, ctx_str, ctx_str_len, public_key, prm);
}
#endif